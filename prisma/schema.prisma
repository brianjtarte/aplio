// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  provider      String    @default("credentials")
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  profile      Profile?
  experiences  Experience[]
  links        Link[]
  preferences  JobPreference?
  applications Application[]
  documents    Document[]
  plan         Plan?
  runs         Run[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  headline          String?
  location          String?
  phone             String?
  salaryMin         Int?
  salaryMax         Int?
  workModes         String   @default("")
  roles             String   @default("")
  summary           String?
  accessibilityNotes String?
  completionScore   Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Experience {
  id          String    @id @default(cuid())
  userId      String
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean   @default(false)
  description String
  skills      String
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Link {
  id        String   @id @default(cuid())
  userId    String
  type      String
  label     String?
  url       String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("links")
}

model JobPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  categories        String   @default("")
  keywords          String   @default("")
  excludedKeywords  String   @default("")
  excludedCompanies String   @default("")
  locations         String   @default("")
  remote            Boolean  @default(true)
  hybrid            Boolean  @default(true)
  onSite            Boolean  @default(false)
  seniorityLevels   String   @default("")
  minSalary         Int?
  maxSalary         Int?
  autopilotEnabled  Boolean  @default(false)
  dailyAppLimit     Int      @default(5)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("job_preferences")
}

model Job {
  id           String   @id @default(cuid())
  source       String
  sourceJobId  String   @unique
  title        String
  company      String
  location     String?
  mode         String
  level        String
  category     String?
  salary       String?
  salaryMin    Int?
  salaryMax    Int?
  postedAt     DateTime
  expiresAt    DateTime?
  url          String
  description  String
  requirements String?
  benefits     String?
  skills       String   @default("")
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applications Application[]

  @@map("jobs")
}

model Application {
  id             String   @id @default(cuid())
  userId         String
  jobId          String
  status         String   @default("QUEUED")
  autopilot      Boolean  @default(false)
  priority       Int      @default(0)
  appliedAt      DateTime?
  responseAt     DateTime?
  interviewAt    DateTime?
  rejectedAt     DateTime?
  coverLetterId  String?
  resumeId       String?
  errorMessage   String?
  retryCount     Int      @default(0)
  maxRetries     Int      @default(3)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id])
  coverLetter Document? @relation("CoverLetterApplication", fields: [coverLetterId], references: [id])
  resume      Document? @relation("ResumeApplication", fields: [resumeId], references: [id])

  @@unique([userId, jobId])
  @@map("applications")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String
  format    String   @default("text")
  model     String?
  tokens    Int?
  forJobId  String?
  template  String?
  version   Int      @default(1)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverLetterApplications Application[] @relation("CoverLetterApplication")
  resumeApplications      Application[] @relation("ResumeApplication")

  @@map("documents")
}

model Plan {
  id                String   @id @default(cuid())
  userId            String   @unique
  tier              String
  appsPerMonth      Int
  appsUsedThisCycle Int      @default(0)
  cycleStartsAt     DateTime @default(now())
  renewsAt          DateTime
  stripeCustomerId  String?
  stripeSubId       String?
  stripePriceId     String?
  status            String   @default("active")
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plans")
}

model Run {
  id          String    @id @default(cuid())
  userId      String
  mode        String
  status      String    @default("running")
  startedAt   DateTime  @default(now())
  finishedAt  DateTime?
  jobsFound   Int       @default(0)
  appsQueued  Int       @default(0)
  appsApplied Int       @default(0)
  appsFailed  Int       @default(0)
  errorText   String?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("runs")
}